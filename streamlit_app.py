# streamlit_app.py

import streamlit as st
from langchain_core.messages import AIMessage, HumanMessage

# Importamos o executor e a vari√°vel de estado que as ferramentas usam
from agent import master_agent_executor
from config import session_state # <-- Importa√ß√£o crucial

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Chatbot Ferrocorte Industrial", page_icon="ü§ñ")
st.title("ü§ñ Assistente de Vendas Ferrocorte")
st.caption("Ol√°! Sou seu assistente virtual. Me diga qual produto voc√™ precisa e montarei seu or√ßamento.")

# --- Inicializa√ß√£o do Estado da Sess√£o ---
# Usamos o st.session_state, que √© a forma correta de guardar dados no Streamlit
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [
        AIMessage(content="Ol√°! Sou seu assistente de vendas da Ferrocorte. Como posso te ajudar hoje?")
    ]
if "orcamento_atual" not in st.session_state:
    st.session_state.orcamento_atual = None
if "ultimos_produtos_encontrados" not in st.session_state:
    st.session_state.ultimos_produtos_encontrados = []


# --- Exibe o hist√≥rico do chat ---
for message in st.session_state.chat_history:
    if isinstance(message, AIMessage):
        with st.chat_message("AI", avatar="ü§ñ"):
            st.write(message.content)
    elif isinstance(message, HumanMessage):
        with st.chat_message("Human", avatar="üë§"):
            st.write(message.content)

# --- L√≥gica de Intera√ß√£o ---
user_prompt = st.chat_input("Descreva o produto ou responda...", key="user_chat_input")

if user_prompt:
    st.session_state.chat_history.append(HumanMessage(content=user_prompt))
    with st.chat_message("Human", avatar="üë§"):
        st.write(user_prompt)

    with st.chat_message("AI", avatar="ü§ñ"):
        with st.spinner("Pensando..."):
            # ==================================================================
            # A CORRE√á√ÉO CR√çTICA EST√Å AQUI: SINCRONIZA√á√ÉO DE ESTADO
            # ==================================================================

            # 1. CARREGAR ESTADO: Antes de rodar, damos √†s ferramentas a mem√≥ria
            #    salva na sess√£o do Streamlit.
            session_state["orcamento_atual"] = st.session_state.orcamento_atual
            session_state["ultimos_produtos_encontrados"] = st.session_state.ultimos_produtos_encontrados

            # Invoca o agente com o input e o hist√≥rico
            response = master_agent_executor.invoke({
                "input": user_prompt,
                "chat_history": st.session_state.chat_history
            })
            ai_response = response['output']

            # 2. SALVAR ESTADO: Depois que o agente roda, salvamos qualquer
            #    mudan√ßa de volta na sess√£o do Streamlit para a pr√≥xima rodada.
            st.session_state.orcamento_atual = session_state["orcamento_atual"]
            st.session_state.ultimos_produtos_encontrados = session_state["ultimos_produtos_encontrados"]

            # ==================================================================
            # FIM DA CORRE√á√ÉO
            # ==================================================================

            st.write(ai_response)

    # Adiciona a resposta final ao hist√≥rico do chat
    st.session_state.chat_history.append(AIMessage(content=ai_response))

    # For√ßa o rerender da p√°gina para mostrar a √∫ltima mensagem
    st.rerun()
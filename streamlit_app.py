<<<<<<< HEAD
import streamlit as st
from langchain_core.messages import AIMessage, HumanMessage

# Ã‰ importante importar a configuraÃ§Ã£o e o executor do agente
# As variÃ¡veis de ambiente serÃ£o carregadas aqui pela primeira vez
from config import llm  # Garante que o llm e os segredos sejam carregados
from agent import master_agent_executor

# --- ConfiguraÃ§Ã£o da PÃ¡gina ---
st.set_page_config(page_title="Chatbot Ferrocorte Industrial", page_icon="ðŸ¤–")
st.title("ðŸ¤– Assistente de Vendas Ferrocorte")
st.caption("OlÃ¡! Sou seu assistente virtual. Me diga qual produto vocÃª precisa e montarei seu orÃ§amento.")

# --- Gerenciamento do HistÃ³rico do Chat ---
# O st.session_state funciona como uma memÃ³ria para a sessÃ£o do usuÃ¡rio no app
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Exibe as mensagens do histÃ³rico na interface
for message in st.session_state.chat_history:
    if isinstance(message, AIMessage):
        with st.chat_message("AI", avatar="ðŸ¤–"):
            st.write(message.content)
    elif isinstance(message, HumanMessage):
        with st.chat_message("Human", avatar="ðŸ‘¤"):
            st.write(message.content)

# --- LÃ³gica de InteraÃ§Ã£o ---
user_prompt = st.chat_input("Descreva o produto que vocÃª precisa...")

if user_prompt:
    # Adiciona a mensagem do usuÃ¡rio ao histÃ³rico e Ã  interface
    st.session_state.chat_history.append(HumanMessage(content=user_prompt))
    with st.chat_message("Human", avatar="ðŸ‘¤"):
        st.write(user_prompt)

    # Gera e exibe a resposta do assistente
    with st.chat_message("AI", avatar="ðŸ¤–"):
        with st.spinner("Analisando seu pedido..."):
            # Invoca o agente com o input e o histÃ³rico
            response = master_agent_executor.invoke({
                "input": user_prompt,
                "chat_history": st.session_state.chat_history
            })
            ai_response = response['output']
            st.write(ai_response)

    # Adiciona a resposta da IA ao histÃ³rico
=======
import streamlit as st
from langchain_core.messages import AIMessage, HumanMessage

# Ã‰ importante importar a configuraÃ§Ã£o e o executor do agente
# As variÃ¡veis de ambiente serÃ£o carregadas aqui pela primeira vez
from config import llm  # Garante que o llm e os segredos sejam carregados
from agent import master_agent_executor

# --- ConfiguraÃ§Ã£o da PÃ¡gina ---
st.set_page_config(page_title="Chatbot Ferrocorte Industrial", page_icon="ðŸ¤–")
st.title("ðŸ¤– Assistente de Vendas Ferrocorte")
st.caption("OlÃ¡! Sou seu assistente virtual. Me diga qual produto vocÃª precisa e montarei seu orÃ§amento.")

# --- Gerenciamento do HistÃ³rico do Chat ---
# O st.session_state funciona como uma memÃ³ria para a sessÃ£o do usuÃ¡rio no app
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Exibe as mensagens do histÃ³rico na interface
for message in st.session_state.chat_history:
    if isinstance(message, AIMessage):
        with st.chat_message("AI", avatar="ðŸ¤–"):
            st.write(message.content)
    elif isinstance(message, HumanMessage):
        with st.chat_message("Human", avatar="ðŸ‘¤"):
            st.write(message.content)

# --- LÃ³gica de InteraÃ§Ã£o ---
user_prompt = st.chat_input("Descreva o produto que vocÃª precisa...")

if user_prompt:
    # Adiciona a mensagem do usuÃ¡rio ao histÃ³rico e Ã  interface
    st.session_state.chat_history.append(HumanMessage(content=user_prompt))
    with st.chat_message("Human", avatar="ðŸ‘¤"):
        st.write(user_prompt)

    # Gera e exibe a resposta do assistente
    with st.chat_message("AI", avatar="ðŸ¤–"):
        with st.spinner("Analisando seu pedido..."):
            # Invoca o agente com o input e o histÃ³rico
            response = master_agent_executor.invoke({
                "input": user_prompt,
                "chat_history": st.session_state.chat_history
            })
            ai_response = response['output']
            st.write(ai_response)

    # Adiciona a resposta da IA ao histÃ³rico
>>>>>>> f160444e56a25990e580ea6273fecb4a4a433cb2
    st.session_state.chat_history.append(AIMessage(content=ai_response))
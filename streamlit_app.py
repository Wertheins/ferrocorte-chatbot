# streamlit_app.py

import streamlit as st
from langchain_core.messages import AIMessage, HumanMessage
from agent import master_agent_executor

# --- ConfiguraÃ§Ã£o da PÃ¡gina ---
st.set_page_config(page_title="Chatbot Ferrocorte Industrial", page_icon="ğŸ¤–")
st.title("ğŸ¤– Assistente de Vendas Ferrocorte")
st.caption("OlÃ¡! Sou seu assistente virtual. Me diga qual produto vocÃª precisa e montarei seu orÃ§amento.")

# --- InicializaÃ§Ã£o do Estado da SessÃ£o ---
# A Ãºnica coisa que precisamos guardar Ã© o histÃ³rico do chat para exibi-lo.
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [
        AIMessage(content="OlÃ¡! Sou seu assistente de vendas da Ferrocorte. Como posso te ajudar hoje?")
    ]

# --- Exibe o histÃ³rico do chat ---
for message in st.session_state.chat_history:
    if isinstance(message, AIMessage):
        with st.chat_message("AI", avatar="ğŸ¤–"):
            st.write(message.content)
    elif isinstance(message, HumanMessage):
        with st.chat_message("Human", avatar="ğŸ‘¤"):
            st.write(message.content)

# --- LÃ³gica de InteraÃ§Ã£o ---
user_prompt = st.chat_input("Descreva o produto ou responda...", key="user_chat_input")

if user_prompt:
    # Adiciona a mensagem do usuÃ¡rio Ã  UI e ao histÃ³rico
    st.session_state.chat_history.append(HumanMessage(content=user_prompt))
    with st.chat_message("Human", avatar="ğŸ‘¤"):
        st.write(user_prompt)

    # A interface agora Ã© muito mais simples.
    # Ela apenas invoca o agente e espera a resposta.
    # Toda a lÃ³gica de "o que fazer agora" estÃ¡ dentro do agente.
    with st.chat_message("AI", avatar="ğŸ¤–"):
        with st.spinner("Pensando..."):
            # O agente agora recebe o histÃ³rico de chat completo para ter contexto
            response = master_agent_executor.invoke({
                "input": user_prompt,
                "chat_history": st.session_state.chat_history
            })
            ai_response = response['output']
            st.write(ai_response)

    # Adiciona a resposta do agente ao histÃ³rico para a prÃ³xima rodada
    st.session_state.chat_history.append(AIMessage(content=ai_response))

    # ForÃ§a a UI a rolar para a Ãºltima mensagem
    st.rerun()